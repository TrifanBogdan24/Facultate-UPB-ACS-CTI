package commands.usercmds;

import app.Announcement;
import app.Event;
import app.Merch;
import app.SingletonAdmin;
import app.audio.Collections.Album;
import app.audio.Collections.AudioCollection;
import app.audio.Collections.Podcast;
import app.audio.Files.AudioFile;
import app.audio.Files.Song;
import app.audio.LibraryEntry;
import app.player.PlayerSource;
import app.searchBar.SearchBar;
import app.user.Artist;
import app.user.Host;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class DeleteUser implements CommandRunner {

    public DeleteUser() {

    }

    /**
     * DeleteUser object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = deleteUserMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * DeleteUser message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String deleteUserMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        admin.simulateTimeForAllUsers(commandInput.getTimestamp());

        if (!hasSomethinInOthersLoad(user)) {
            return (username + " can't be deleted.");
        }

        // user can be successfully deleted
        // but, must also be deleted from the liked songs
        removeUserFromLikedSongs(user);
        removeArtistAlbums(user);
        removeArtistMerhs(user);
        removeArtistAlbums(user);
        removeHostPodcast(user);
        removeHostEvents(user);
        removeHostAnnouncements(user);

        // removing the user from the admin
        ArrayList<User> users = admin.getUsers();
        users.remove(user);
        admin.setUsers(users);
        admin.setCurrentUser(null);
        return (username + " was successfully deleted.");
    }

    /**
     *
     * @param owner     the user that owns an audio file
     * @return          whether one of the user's audio file is played by another user
     */
    public static boolean hasSomethinInOthersLoad(final User owner) {
        SingletonAdmin admin = SingletonAdmin.getInstance();

        for (User user: admin.getUsers()) {
            if (user == owner) {
                continue;
            }

            if (user.getPlayer() == null || user.getPlayer().getSource() == null) {
                continue;
            }

            PlayerSource source = user.getPlayer().getSource();

            if (source.getAudioCollection() != null) {
                AudioCollection audioCollection = source.getAudioCollection();
                if (audioCollection.getOwner().equals(owner.getUsername())) {
                    return true;
                }
            }

        }
        return false;
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to liked songs
     */
    public static void removeUserFromLikedSongs(final User user) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        ArrayList<Song> songs = admin.getSongs();

        for (Song song: user.getLikedSongs()) {
            song.dislike();
        }

        admin.setSongs(songs);
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to albums
     */
    public static void removeArtistAlbums(final User user) {

        if (!user.getClass().equals(Artist.class)) {
            return;
        }

        SingletonAdmin admin = SingletonAdmin.getInstance();
        ArrayList<Album> albums = admin.getAlbums();
        Artist artist = (Artist) user;

        albums.removeAll(artist.getAlbums());
        artist.setAlbums(new ArrayList<>());
        admin.setAlbums(albums);
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to merchs
     */
    public static void removeArtistMerhs(final User user) {
        if (!user.getClass().equals(Artist.class)) {
            return;
        }

        SingletonAdmin admin = SingletonAdmin.getInstance();
        Artist artist = (Artist) user;
        ArrayList<Merch> merchs = admin.getMerchs();
        merchs.removeAll(artist.getMerchs());
        admin.setMerchs(merchs);
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to liked events
     */
    public static void removeHostEvents(final User user) {
        if (!user.getClass().equals(Artist.class)) {
            return;
        }

        SingletonAdmin admin = SingletonAdmin.getInstance();
        Artist artist = (Artist) user;
        ArrayList<Event> events = admin.getEvents();
        events.removeAll(artist.getEvents());
        admin.setEvents(events);
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to podcasts
     */
    public static void removeHostPodcast(final User user) {
        if (!user.getClass().equals(Host.class)) {
            return;
        }

        SingletonAdmin admin = SingletonAdmin.getInstance();
        Host host = (Host) user;
        ArrayList<Podcast> podcasts = admin.getPodcasts();

        podcasts.removeAll(host.getPodcasts());
        admin.setPodcasts(podcasts);
    }

    /**
     *
     * @param user      the user from which the function deletes
     *                  references to announcements
     */
    public static void removeHostAnnouncements(final User user) {
        if (!user.getClass().equals(Host.class)) {
            return;
        }

        SingletonAdmin admin = SingletonAdmin.getInstance();
        Host host = (Host) user;
        ArrayList<Announcement> announcements = admin.getAnnouncements();
        announcements.removeAll(host.getAnnouncements());
        admin.setAnnouncements(announcements);
    }
}
