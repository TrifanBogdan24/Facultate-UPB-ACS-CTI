package commands.hostcmds;

import app.SingletonAdmin;
import app.audio.Collections.Podcast;
import app.audio.Files.Episode;
import app.user.Host;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;
import fileio.input.EpisodeInput;

import java.util.ArrayList;

public class AddPodcast implements CommandRunner {

    public AddPodcast() {

    }


    /**
     * AddPodcast object node
     *
     * @param commandInput the input command from the input/test* files
     * @return the ouput command, on object node that will be written
     * in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = addPodcastMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * AddPodcast message
     *
     * @param commandInput from the input/test* files
     * @return the message generated by the execution of the input command
     */
    private static String addPodcastMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();
        String podcastName = commandInput.getName();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);

        if (!user.getClass().equals(Host.class)) {
            return (username + " is not a host.");
        }

        Host host = (Host) user;

        if (host.getHostPodcastByName(podcastName) != null) {
            return (username + " has another podcast with the same name.");
        }

        ArrayList<EpisodeInput> episodesInput = commandInput.getEpisodes();
        ArrayList<Episode> episodes = new ArrayList<>();
        for (EpisodeInput episodeInput: episodesInput) {
            episodes.add(new Episode(episodeInput.getName(),
                    episodeInput.getDuration(), episodeInput.getDescription()));
        }

        Podcast addedPodcast = new Podcast(podcastName, username, episodes);

        String realOwner = getRealEpisodeOwner(addedPodcast);

        if (addedPodcast.containsDoubleEpisodes()) {
            return (realOwner + " has the same episode in this podcast.");
        }

        // podcast can be successfully added

        // adding new podcast to host's podcast collection
        ArrayList<Podcast> hostPodcasts = host.getPodcasts();
        hostPodcasts.add(addedPodcast);
        host.setPodcasts(hostPodcasts);

        // adding new podcast to library (admin)
        ArrayList<Podcast> adminPodcasts = admin.getPodcasts();
        adminPodcasts.add(addedPodcast);
        admin.setPodcasts(adminPodcasts);

        return (username + " has added new podcast successfully.");
    }


    /**
     *
     * @param podcast   a podcast
     * @return          the name of the user who already owns one of the podcast's episodes
     */
    public static String getRealEpisodeOwner(final Podcast podcast) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        ArrayList<Host> hosts = admin.getAllHosts();

        ArrayList<String> podcastEpisodeNames = podcast.getEpisodesNames();

        for (Host host: hosts) {
            ArrayList<String> hostEpisodesNames = host.getAllEpisodesNames();
            for (String name: podcastEpisodeNames) {
                if (podcastEpisodeNames.contains(name)) {
                    return podcast.getOwner();
                }
            }
        }
        return "";
    }
}
