package commands.hostcmds;

import app.Announcement;
import app.SingletonAdmin;
import app.user.Host;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public class RemoveAnnouncement implements CommandRunner {

    public RemoveAnnouncement() {

    }

    /**
     *
     * RemoveAnnouncement object node
     *
     * @param commandInput the input command from the input/test* files
     * @return the ouput command, on object node that will be written
     * in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = removeAnnouncementMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * RemoveAnnouncement message
     *
     * @param commandInput from the input/test* files
     * @return the message generated by the execution of the input command
     */
    private static String removeAnnouncementMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);

        if (!user.getClass().equals(Host.class)) {
            return (username + " is not a host.");
        }

        Host host = (Host) user;
        Announcement removedAnnouncement = host.getHostAnnouncementByName(commandInput.getName());

        if (removedAnnouncement == null) {
            return (username + " has no announcement with the given name.");
        }

        // announcement can be successfully added
        ArrayList<Announcement> announcements = host.getAnnouncements();
        announcements.remove(removedAnnouncement);
        host.setAnnouncements(announcements);
        return (username + " has successfully deleted the announcement.");
    }

}
