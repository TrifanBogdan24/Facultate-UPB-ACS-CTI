package commands.artistcmds;

import app.SingletonAdmin;
import app.audio.Collections.Album;
import app.audio.Collections.AlbumOuput;
import app.user.Artist;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class ShowAlbums implements CommandRunner {

    public ShowAlbums() {

    }

    /**
     * ShowAlbums object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    public ObjectNode execute(final CommandInput commandInput) {
        ArrayList<AlbumOuput> albums = showAlbumsResult(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("result", objectMapper.valueToTree(albums));

        return objectNode;
    }

    /**
     * ShowAlbums result
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    public static ArrayList<AlbumOuput> showAlbumsResult(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        ArrayList<AlbumOuput> albums = new ArrayList<>();

        if (user == null || !user.getClass().equals(Artist.class)) {
            // The username <username> doesn't exist.
            return albums;
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);


        Artist artist = (Artist) user;      // down-casting from User to Artist

        for (Album album: artist.getAlbums()) {
            albums.add(new AlbumOuput(album.getName(), album.getSongsToString()));
        }

        return albums;
    }
}
