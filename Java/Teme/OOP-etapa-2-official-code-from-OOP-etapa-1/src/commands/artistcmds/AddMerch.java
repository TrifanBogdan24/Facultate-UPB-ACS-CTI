package commands.artistcmds;

import app.Merch;
import app.SingletonAdmin;
import app.user.Artist;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class AddMerch implements CommandRunner {

    public AddMerch() {

    }

    /**
     * AddMerch object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    public ObjectNode execute(final CommandInput commandInput) {
        String message = addMerchMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * AddMerch message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String addMerchMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);

        if (!user.getClass().equals(Artist.class)) {
            return (username + " is not an artist.");
        }

        Artist artist = (Artist) user;       // down-casting from User to Artist

        // merch's information and fields
        String name = commandInput.getName();
        String description = commandInput.getDescription();
        Integer price = commandInput.getPrice();

        Merch addedMerch = admin.getMerchByName(name);

        if (addedMerch != null) {
            String merchOwner = addedMerch.getArtistName();
            return (merchOwner + " has merchandise with the same name.");
        }

        if (price < 0) {
            return "Price for merchandise can not be negative.";
        }

        // new merch can be successfully added
        addedMerch = new Merch(username, name, description, price);

        // adding to admin
        ArrayList<Merch> adminMerchs = admin.getMerchs();
        adminMerchs.add(addedMerch);
        admin.setMerchs(adminMerchs);

        // adding merch to artist
        ArrayList<Merch> artistMerchs = artist.getMerchs();
        artistMerchs.add(addedMerch);
        artist.setMerchs(artistMerchs);

        return  (username + " has added new merchandise successfully.");
    }
}
