package commands.artistcmds;

import app.Event;
import app.SingletonAdmin;
import app.user.Artist;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class AddEvent implements CommandRunner {

    public AddEvent() {
    }

    /**
     * AddEvent object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = addEventMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * AddEvent message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String addEventMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return "The username " + username + " doesn't exist.";
        }

        user.setTimestampLastPlayedFile(null);

        if (!user.getClass().equals(Artist.class)) {
            return (username + " is not an artist.");
        }

        Artist artist = (Artist) user;      // down-casting from User to Artist

        // event's information and fields
        String name = commandInput.getName();
        String description = commandInput.getDescription();
        String date = commandInput.getDate();

        if (artist.getEventByName(name) != null) {
            return (username + " has another event with the same name.");
        }

        if (!Event.validDate(date)) {
            return ("Event for " + username + " does not have a valid date.");
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();


        // the event can be successfully added
        Event addedEvent = new Event(username, name, description, date);
        ArrayList<Event> events = artist.getEvents();
        events.add(addedEvent);
        artist.setEvents(events);

        return (username + " has added new event successfully.");
    }
}
