package commands.artistcmds;

import app.SingletonAdmin;
import app.audio.Collections.Album;
import app.audio.Files.Song;
import app.user.Artist;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;
import fileio.input.SongInput;

import java.util.ArrayList;

public final class AddAlbum implements CommandRunner {

    public AddAlbum() {
    }


    /**
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command that will be written in the
     *                          files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = addAlbumMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String addAlbumMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        user.setTimestampLastPlayedFile(null);

        // removing the loaded audio file from the player
        user.anulatesUserLoad();

        if (!user.getClass().equals(Artist.class)) {
            return (username + " is not an artist.");
        }

        ArrayList<SongInput> inputSongs = commandInput.getSongs();

        Artist artist = (Artist) user;      // down-casting from User to Artist

        // album's information and fields
        String name = commandInput.getName();
        Integer releaseYear = commandInput.getReleaseYear();
        String description = commandInput.getDescription();

        if (artist.getAlbumByName(name) != null) {
            return (username + " has another album with the same name.");
        }

        if (containsDoubleSongs(inputSongs)) {
            return (username + " has the same song at least twice in this album.");
        }

        ArrayList<Song> albumSongs = new ArrayList<>();
        ArrayList<Song> adminSongs = admin.getSongs();

        if (inputSongs != null && !inputSongs.isEmpty()) {
            // converting songs from SongInput to Song
            for (SongInput songInput : inputSongs) {
                albumSongs.add(new Song(songInput.getName(), songInput.getDuration(), name,
                        songInput.getTags(), songInput.getLyrics(), songInput.getGenre(),
                        songInput.getReleaseYear(), songInput.getArtist()));
            }

            // updating the library with new songs
            // if the album constains songs that the admin doesn't
            for (Song song: albumSongs) {

                if (admin.getSongByName(song.getName()) == null) {
                    adminSongs.add(song);
                }
            }
        }
        admin.setSongs(adminSongs);


        // album can be added successfully
        Album addedAlbum = new Album(username, name, releaseYear, description, albumSongs);

        // adding album to artist's collection
        ArrayList<Album> artistAlbums = artist.getAlbums();
        artistAlbums.add(addedAlbum);
        artist.setAlbums(artistAlbums);

        // adding album in database
        ArrayList<Album> adminAlbums = admin.getAlbums();
        adminAlbums.add(addedAlbum);
        admin.setAlbums(adminAlbums);

        return (username + " has added new album successfully.");
    }

    /**
     *
     * @param songs     an ArrayList of SongInput
     * @return          true if there are at least two identical SongInput instances
     *                  otherwise, false
     */
    public static boolean containsDoubleSongs(final ArrayList<SongInput> songs) {
        if (songs == null) {
            return false;
        }

        int len = songs.size();

        for (int i = 0; i <= len - 2; i++) {
            for (int j = i + 1; j <= len - 1; j++) {
                SongInput song1 = songs.get(i);
                SongInput song2 = songs.get(j);
                if (song1.getName().equalsIgnoreCase(song2.getName())) {
                    return true;
                }
            }
        }

        return false;
    }
}
