package commands.pagecmds;

import app.SingletonAdmin;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

public final class PrintCurrentPage implements CommandRunner {

    public PrintCurrentPage() {

    }

    /**
     * PrintCurrentPage object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = printCurrentPageMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("user", commandInput.getUsername());
        objectNode.put("command", commandInput.getCommand());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * PrintCurrentPage message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    public static String printCurrentPageMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        if (user == null) {
            return ("The username " + username + " doesn't exist.");
        }

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);

        if (!user.isOnline()) {
            return (username + " is offline.");
        }

        switch (user.getPageType()) {
            case HOME: return messageForHomePage();
            case LIKED: return messageForLikedContentPage();
            case ARTIST: return messageForArtistPage();
            case HOST: return messageForHostPage();
            default: return ("Invalid page " + user.getPageType());
        }
    }

    /**
     *
     * @return      the message that is generated if the current page is Home Page
     */
    public static String messageForHomePage() {
        SingletonAdmin admin = SingletonAdmin.getInstance();

        return  "Liked songs:\n\t" + admin.getSongsForHomePage()
                + "\n\nFollowed playlists:\n\t" + admin.getPlaylistsForHomePage();
    }

    /**
     *
     * @return      the message that is generated if the current page is LikedContent Page
     */
    public static String messageForLikedContentPage() {
        SingletonAdmin admin = SingletonAdmin.getInstance();

        return "Liked songs:\n\t" + admin.getSongsForLikedContentPage()
                + "\n\nFollowed playlists:\n\t" + admin.getPlaylistsForLikedPage();
    }

    /**
     *
     * @return      the message that is generated if the current page is Artist Page
     */
    public static String messageForArtistPage() {
        SingletonAdmin admin = SingletonAdmin.getInstance();

        return "Albums:\n\t" + admin.getAlbumsForArtistPage()
                + "\n\nMerch:\n\t" + admin.getMerchsForArtistPage()
                + "\n\nEvents:\n\t" + admin.getEventsForArtisPAge();
    }

    /**
     *
     * @return      the message that is generated if the current page is Host Page
     */
    public static String messageForHostPage() {
        SingletonAdmin admin = SingletonAdmin.getInstance();

        return "Podcasts:\n\t" + admin.getPodcastsForHostPage()
                + "\n\nAnnouncements:\n\t" + admin.getAnnouncementsForHostPage();
    }

}
