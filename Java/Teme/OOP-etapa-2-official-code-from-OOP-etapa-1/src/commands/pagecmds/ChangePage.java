package commands.pagecmds;

import app.SingletonAdmin;
import app.user.User;
import app.utils.Enums;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

public final class ChangePage implements CommandRunner {

    public ChangePage() {

    }

    /**
     * ChangePage object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = changePageMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * ChangePage message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    public static String changePageMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);

        // removing the loaded audio file from the player
        user.anulatesUserLoad();
        user.setTimestampLastPlayedFile(null);


        switch (commandInput.getNextPage()) {
            case "Home":
                user.setPageType(Enums.PageType.HOME);
                return (username + " accessed Home successfully.");
            case "LikedContent":
                user.setPageType(Enums.PageType.LIKED);
                return (username + " accessed LikedContent successfully.");
            case "Artist":
                user.setPageType(Enums.PageType.ARTIST);
                return (username + " accessed Arits successfully.");
            case "Host":
                user.setPageType(Enums.PageType.HOST);
                return (username + " accessed Host successfully.");
            default:
                return (username + " is trying to access a non-existent page.");
        }
    }
}
