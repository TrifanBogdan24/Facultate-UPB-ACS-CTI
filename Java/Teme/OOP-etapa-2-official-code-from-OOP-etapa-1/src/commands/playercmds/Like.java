package commands.playercmds;

import app.SingletonAdmin;
import app.audio.Files.Song;
import app.player.Player;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class Like implements CommandRunner {

    public Like() {

    }

    /**
     * Like object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = likeMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }


    /**
     * Like message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String likeMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);


        if (user == null) {
            return "The username " + username + " doesn't exist.";
        }

        user.setTimestampLastPlayedFile(null);

        if (!user.isOnline()) {
            return username + " is offline.";
        }

        Player player = user.getPlayer();

        if (player.getCurrentAudioFile() == null) {
            return "Please load a source before liking or unliking.";
        }

        if (!player.getType().equals("song") && !player.getType().equals("playlist")) {
            return "Loaded source is not a song.";
        }

        Song song = (Song) player.getCurrentAudioFile();
        ArrayList<Song> likedSongs = user.getLikedSongs();

        if (likedSongs.contains(song)) {
            likedSongs.remove(song);
            user.setLikedSongs(likedSongs);
            song.dislike();


            return "Unlike registered successfully.";
        }

        likedSongs.add(song);
        user.setLikedSongs(likedSongs);
        song.like();

        return "Like registered successfully.";
    }
}
