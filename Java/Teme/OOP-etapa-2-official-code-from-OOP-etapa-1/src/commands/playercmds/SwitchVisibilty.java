package commands.playercmds;

import app.SingletonAdmin;
import app.audio.Playlist;
import app.user.User;
import app.utils.Enums;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class SwitchVisibilty implements CommandRunner {

    public SwitchVisibilty() {

    }

    /**
     * Switch visibility object node.
     *
     * @param commandInput the input command
     * @return the object node
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = switchPlaylistVisibilityMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }


    /**
     *
     * @param commandInput      the input command
     * @return                  the message generated by the execution of the input command
     */
    private static String switchPlaylistVisibilityMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);


        if (user == null) {
            return "The username " + username + " doesn't exist.";
        }

        user.setTimestampLastPlayedFile(null);

        if (!user.isOnline()) {
            return username + " is offline.";
        }


        Integer playlistId = commandInput.getPlaylistId();
        ArrayList<Playlist> playlists = user.getPlaylists();

        if (playlistId > playlists.size()) {
            return "The specified playlist ID is too high.";
        }

        Playlist playlist = playlists.get(playlistId - 1);
        playlist.switchVisibility();
        user.setPlaylists(playlists);

        if (playlist.getVisibility() == Enums.Visibility.PUBLIC) {
            return "Visibility status updated successfully to public.";
        }

        return "Visibility status updated successfully to private.";
    }
}
