package commands.playercmds;

import app.SingletonAdmin;
import app.audio.Playlist;
import app.audio.Collections.PlaylistOutput;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class ShowPlaylists implements CommandRunner {

    public ShowPlaylists() {

    }

    /**
     * ShowPlaylists object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(commandInput.getUsername());

        if (user == null) {
            return null;
        }

        ArrayList<PlaylistOutput> playlists = showPlaylists();

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("result", objectMapper.valueToTree(playlists));

        return objectNode;
    }


    /**
     * ShowPlaylists message
     *
     * @return                   the message generated by the execution of the input command
     */
    private static ArrayList<PlaylistOutput> showPlaylists() {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getCurrentUser();
        user.setTimestampLastPlayedFile(null);

        ArrayList<Playlist> playlists = user.getPlaylists();

        ArrayList<PlaylistOutput> playlistOutputs = new ArrayList<>();

        for (Playlist playlist : playlists) {
            PlaylistOutput playlistOutput = new PlaylistOutput(playlist);
            playlistOutputs.add(playlistOutput);
        }

        return playlistOutputs;
    }

}
