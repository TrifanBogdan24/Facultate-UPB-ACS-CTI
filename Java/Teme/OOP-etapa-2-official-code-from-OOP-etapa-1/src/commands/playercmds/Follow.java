package commands.playercmds;

import app.SingletonAdmin;
import app.audio.Playlist;
import app.audio.LibraryEntry;
import app.searchBar.SearchBar;
import app.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class Follow implements CommandRunner {

    public Follow() {

    }

    /**
     * Follow object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = followMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * Follow message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    private static String followMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);


        if (user == null) {
            return "The username " + username + " doesn't exist.";
        }

        if (!user.isOnline()) {
            return username + " is offline.";
        }

        SearchBar searchBar = user.getSearchBar();
        ArrayList<Playlist> followedPlaylists = user.getFollowedPlaylists();

        LibraryEntry selection = searchBar.getLastSelectedLibraryEntry();
        String type = searchBar.getLastSearchType();

        if (selection == null) {
            return "Please select a source before following or unfollowing.";
        }

        user.setTimestampLastPlayedFile(null);

        if (!type.equals("playlist")) {
            return "The selected source is not a playlist.";
        }

        Playlist playlist = (Playlist) selection;

        if (playlist.getOwner().equals(user.getUsername())) {
            return "You cannot follow or unfollow your own playlist.";
        }


        if (followedPlaylists.contains(playlist)) {
            followedPlaylists.remove(playlist);
            user.setFollowedPlaylists(followedPlaylists);

            playlist.decreaseFollowers();

            return "Playlist unfollowed successfully.";
        }

        followedPlaylists.add(playlist);
        user.setFollowedPlaylists(followedPlaylists);

        playlist.increaseFollowers();


        return "Playlist followed successfully.";
    }

}
