package commands.playercmds;

import app.SingletonAdmin;
import app.audio.LibraryEntry;
import app.searchBar.SearchBar;
import app.user.Artist;
import app.user.Host;
import app.user.User;
import app.utils.Enums;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import commands.CommandRunner;
import fileio.input.CommandInput;

import java.util.ArrayList;

public final class Select implements CommandRunner {

    public Select() {

    }


    /**
     * Select object node
     *
     * @param commandInput      the input command from the input/test* files
     * @return                  the ouput command, on object node that will be written
     *                          in the files of the result/ directory
     */
    @Override
    public ObjectNode execute(final CommandInput commandInput) {
        String message = selectMessage(commandInput);

        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = objectMapper.createObjectNode();

        objectNode.put("command", commandInput.getCommand());
        objectNode.put("user", commandInput.getUsername());
        objectNode.put("timestamp", commandInput.getTimestamp());
        objectNode.put("message", message);

        return objectNode;
    }

    /**
     * Select message
     *
     * @param commandInput       from the input/test* files
     * @return                   the message generated by the execution of the input command
     */
    public static String selectMessage(final CommandInput commandInput) {
        String username = commandInput.getUsername();

        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getUserByName(username);
        admin.setCurrentUser(user);


        if (user == null) {
            return "The username " + username + " doesn't exist.";
        }

        if (!user.isOnline()) {
            return username + " is offline.";
        }


        SearchBar searchBar = user.getSearchBar();

        if (searchBar.getLastSearchType() == null) {
            return "Please conduct a search before making a selection.";
        }


        switch (searchBar.getLastSearchType()) {
            case "song": return selectLibraryEntryMessage(commandInput);
            case "podcast":  return selectLibraryEntryMessage(commandInput);
            case "playlist":  return selectLibraryEntryMessage(commandInput);
            case "album": return selectLibraryEntryMessage(commandInput);
            case "artist": return selectArtistMessage(commandInput);
            case "host": return selectHostMessage(commandInput);
            default: return "Please conduct a search before making a selection.";
        }
    }

    /**
     *
     * @param commandInput      the input command
     * @return                  message generated by selecting
     *                          a searched song / podcast / playlist
     */
    public static String selectLibraryEntryMessage(final CommandInput commandInput) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getCurrentUser();

        SearchBar searchBar = user.getSearchBar();

        int itemNumber = commandInput.getItemNumber();
        boolean lastSearched = false;

        LibraryEntry selected = searchBar.select(itemNumber);

        user.setLastSearched(lastSearched);
        user.setSearchBar(searchBar);

        if (selected == null) {
            return "The selected ID is too high.";
        }

        return "Successfully selected %s.".formatted(selected.getName());
    }

    /**
     *
     * @param commandInput      the input command
     * @return                  message generated by selecting a searched Artist
     */

    public static String selectArtistMessage(final CommandInput commandInput) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getCurrentUser();

        int itemNumber = commandInput.getItemNumber();
        boolean lastSearched = false;
        user.setLastSearched(lastSearched);

        SearchBar searchBar = user.getSearchBar();
        ArrayList<String> searchedArtists = searchBar.getSearchedArtists();


        if (searchedArtists.size() < itemNumber) {
            return commandInput.getType() + "The selected ID is too high.";
        }

        String selectedArtist = searchedArtists.get(itemNumber - 1);
        searchBar.setLastSelectedArtist(selectedArtist);
        user.setSearchBar(searchBar);

        user.setPageType(Enums.PageType.ARTIST);
        Artist artistForPage = admin.getArtistByName(selectedArtist);
        user.setArtistForPage(artistForPage);

        return "Successfully selected %s's page.".formatted(selectedArtist);
    }


    /**
     *
     * @param commandInput      the input command
     * @return                  the message generated by selecting a searched Host
     */
    public static String selectHostMessage(final CommandInput commandInput) {
        SingletonAdmin admin = SingletonAdmin.getInstance();
        User user = admin.getCurrentUser();
        user.setTimestampLastPlayedFile(null);

        int itemNumber = commandInput.getItemNumber();
        boolean lastSearched = false;
        user.setLastSearched(lastSearched);

        SearchBar searchBar = user.getSearchBar();
        searchBar.setLoadedLibraryEntry(null);
        ArrayList<String> searchedHosts = searchBar.getSearchedHosts();

        if (searchedHosts.size() < itemNumber) {
            return "The selected ID is too high.";
        }


        String selectedHost = searchedHosts.get(itemNumber - 1);
        searchBar.setLastSelectedHost(selectedHost);
        user.setSearchBar(searchBar);

        user.setPageType(Enums.PageType.HOST);
        Host hostForPage = admin.getHostByName(selectedHost);
        user.setHostForPage(hostForPage);

        return "Successfully selected %s's page.".formatted(selectedHost);
    }


}
